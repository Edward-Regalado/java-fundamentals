/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.Arrays;
import java.util.Random;

public class Library {

    // lab 02
    // this function is a random dice generator. n represents the number of dice you would like to roll.
    public int[] roll(int n) {
        Random rand = new Random(); // getting a random number
        int[] diceArray = new int[n]; // creating an array of int of size n - this will get returned
        for (int i = 0; i < n; i++) { // entering for loop
            int diceRoll = rand.nextInt(6) + 1; // get a random number for our dice roll- setting the bounds so the number don't go above 6 (dice
            // only have 6 sides.
            diceArray[i] = diceRoll; // assign the dice roll to our diceArray at index[i] - continue with for loop until the condition become false.
        }
        return diceArray; // return the new array of dice
    }

    // this function checks for duplicates values in a single array
    public boolean containsDuplicate(int[] array) { // returns a boolean and takes in a single array of int
        for (int i = 0; i < array.length; i++) { // using a nested for loop here to compare indexes
            for (int j = i + 1; j < array.length; j++) {
                if (array[i] == (array[j])) { // returns true is the value at index[i] is equal to the values at
                    // index[j]. Continue iteration until the conditional becomes false.
                    return true;
                }
            }
        }
        return false;
    }

    // this function simply calculates the average value of a single array: [1 + 2 + 3 + 4 + 5] = 15 /length(5) = average 3
    public double calculateArrayAverage(int[] array) { // returns a double and takes in an array of int[]
        int sum = 0; // initializing a sum counter - this will add each i iteration in the for loop to the sum total
        for(int i = 0; i < array.length; i++) { // entering for loop
            sum += array[i]; // add input array value at index[i] to sum counter, then i gets incremented for next for
            // loop and we continue to add the elements at index[i] until conditional i < array.length becomes false.
        }
        return (double) sum / array.length; // get average by dividing the total sum by length of input array, then
        // cast to double.
    }

    // this function calculates the average of nested arrays and returns the array with the lowest average
    public int[] calculateLowestArraysOfArraysAverage(int[][] array){
        int returnIndex = 0; // initializing an index variable so we can return the input array at that index
        double lowAvg = calculateArrayAverage(array[0]); // setting a base case for the first for loop iteration
        double currAvg; // this will hold the current array index avg for comparison
        for(int i = 1; i < array.length; i++){ // enter for loop starting at index 1
           currAvg = calculateArrayAverage(array[i]); // calculating the array at index i with method above
           if(currAvg < lowAvg) { // is currAvg less than lowAvg?
               lowAvg = currAvg; // assign currAvg to be the new lowAvg
               returnIndex = i; // move up the index
           }
        } return array[returnIndex];
    }


}

